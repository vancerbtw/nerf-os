#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   11
#define OLED_CLK   13
#define OLED_DC    8
#define OLED_CS    10
#define OLED_RESET 9
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

bool hasBooted = false;
int bootSeconds = 0;

float batteryLevel = 0;

bool menuMode = true;

//pins and previous for toggles
const int modeToggle = 2;
int modePrevious = LOW;

//initalizing firing values with defaults
int pushRate = 225; //0-255 for pwm
int flySpeed = 200; //0-255 for pwm
int fireMode = 2; //0 - semi auto, 1 - 3 round burst, 2 - full auto

static const unsigned char PROGMEM nerf_logo[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x10, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
0xff, 0xc3, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x07, 0xdf, 0xfe, 0x38, 
0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xc3, 0xfc, 0x00, 0x00, 0x00, 0x03, 
0xf0, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0xbf, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x0f, 
0xff, 0x1f, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x20, 0x9e, 
0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x3f, 0x0f, 0xbe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x8f, 0xfe, 0x7e, 0x3f, 0xff, 0xbe, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x3f, 0x8f, 0xe0, 
0x7e, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0x01, 0xff, 0x8f, 0xc0, 0x7e, 0x7f, 0xfe, 0xff, 
0x00, 0x00, 0x00, 0xff, 0x3f, 0xff, 0x0f, 0xc0, 0xfc, 0x7f, 0xe7, 0xfe, 0x00, 0x00, 0x00, 0x7f, 
0x3f, 0xf0, 0x0f, 0xc0, 0xf8, 0x7e, 0x1f, 0xfe, 0x00, 0x0e, 0x00, 0x7e, 0x3f, 0x00, 0x0f, 0xc3, 
0xf0, 0xfe, 0x3f, 0xfe, 0x01, 0xff, 0x00, 0xfe, 0x3f, 0x00, 0x1f, 0xff, 0xe0, 0xfc, 0x3f, 0xfe, 
0x01, 0xff, 0x80, 0xfc, 0x7e, 0x00, 0x1f, 0xff, 0x80, 0xfc, 0x7f, 0xfe, 0x01, 0xff, 0x81, 0xfc, 
0x7e, 0x02, 0x3f, 0xff, 0x81, 0xf8, 0x7f, 0xfc, 0x01, 0xff, 0xc1, 0xfc, 0x7e, 0xfe, 0x3f, 0xff, 
0x81, 0xf8, 0xff, 0xf8, 0x01, 0xff, 0xc1, 0xf8, 0xff, 0xfc, 0x3f, 0x3f, 0x81, 0xf8, 0xff, 0xf0, 
0x01, 0xff, 0xe3, 0xf8, 0xff, 0xfc, 0x7f, 0x1f, 0xc3, 0xf9, 0xff, 0xf0, 0x03, 0xff, 0xe3, 0xf9, 
0xff, 0xf0, 0x7f, 0x0f, 0xe3, 0xf3, 0xff, 0xe0, 0x03, 0xff, 0xf3, 0xf9, 0xfc, 0x00, 0x7e, 0x0f, 
0xfb, 0xf3, 0xff, 0xc0, 0x07, 0xff, 0xf3, 0xf1, 0xf8, 0x00, 0x7e, 0x07, 0xfb, 0xf3, 0xff, 0x80, 
0x07, 0xff, 0xff, 0xf1, 0xf8, 0x00, 0x7c, 0x07, 0xf3, 0xdf, 0xff, 0x00, 0x07, 0xef, 0xff, 0xf1, 
0xf8, 0x00, 0xfc, 0x07, 0xe0, 0x3f, 0xfe, 0x00, 0x0f, 0xe7, 0xff, 0xf1, 0xf8, 0x02, 0xfc, 0x03, 
0x00, 0xff, 0xfc, 0x00, 0x0f, 0xe7, 0xff, 0xe3, 0xf0, 0x3e, 0xfc, 0x00, 0x01, 0xff, 0xf8, 0x00, 
0x0f, 0xe3, 0xff, 0xe3, 0xf3, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x0f, 0xe3, 0xff, 0xc7, 
0xff, 0xfd, 0xf0, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x1f, 0xc1, 0xff, 0xc7, 0xff, 0xf8, 0x00, 0x00, 
0x3f, 0xff, 0x80, 0x00, 0x1f, 0xc0, 0xff, 0xc7, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 
0x1f, 0xc0, 0xff, 0xcf, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0x80, 0x7f, 0xcf, 
0xf0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0x80, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x1f, 
0xff, 0x80, 0x00, 0x00, 0x3f, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 
0x7f, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x1c, 0x00, 
0x00, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0xff, 0xff, 
0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static const unsigned char PROGMEM gun_icon[] = {
0x00, 0x00, 0x7f, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x0b, 0x80, 0x07, 0x80, 0x03, 0x80, 0x03, 0x80, 
0x03, 0x80, 0x00, 0x00
};

void setup()
{
    Serial.begin(9600);

    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if(!display.begin(SSD1306_SWITCHCAPVCC)) {
        Serial.println(F("SSD1306 allocation failed"));
        for(;;); // Don't proceed, loop forever
    }

    pinMode(modeToggle, INPUT);

    // Show initial display buffer contents on the screen --
    // the library initializes this with an Adafruit splash screen.
    display.setTextSize(1);       
    display.setTextColor(WHITE);   
    display.clearDisplay();
    display.display();
    
}

void loop()
{
    if (!hasBooted) 
    {
        display.clearDisplay();
        display.drawBitmap(16, 0, nerf_logo, 96, 49, 1);
        display.setCursor(0, 53);
        switch (bootSeconds) 
        {
            case 0:
                display.println("Loading");
                break;
            case 1:
                display.println("Loading.");
                break;
            case 2:
                display.println("Loading..");
                break;
            case 3:
                display.println("Loading...");
                break;
            case 4:
                display.println("Loading..");
                break;
            case 5:
                display.println("Loading.");
                break;
            case 6:
                display.println("Loading");
                break;
            case 7:
                display.println("Loading.");
                break;
            case 8:
                display.println("Loading..");
                break;
            case 9:
                display.println("Loading...");
                break;
            case 10:
                hasBooted = true;
                display.clearDisplay();
                break;
        }
        delay(280);
        bootSeconds++;

        display.display();
    } else 
    {
        display.clearDisplay();
        unsigned char PROGMEM battery_shell[] = {0xff, 0xfe, 0x80, 0x02, 0x80, 0x03, 0x80, 0x03, 0x80, 0x02, 0xff, 0xfe}; // 16x6px
        unsigned char PROGMEM battery_ind[] = {0xe0, 0xe0}; // 3x2px
        display.drawBitmap(1, 1, battery_shell, 16, 6, 1);
        //this if is for toggling with a button to prevent a continous loop of switching modes

        //measure and set battery level here

        batteryLevel = 0.8;

        if (batteryLevel <= .33) 
        {
            display.drawBitmap(3, 3, battery_ind, 3, 2, 1);
        } else if (batteryLevel <= .66)
        {
             display.drawBitmap(3, 3, battery_ind, 3, 2, 1);
             display.drawBitmap(7, 3, battery_ind, 3, 2, 1);
        } else
        {
            display.drawBitmap(3, 3, battery_ind, 3, 2, 1);
             display.drawBitmap(7, 3, battery_ind, 3, 2, 1);
             display.drawBitmap(11, 3, battery_ind, 3, 2, 1);
        }


        if (modePrevious == HIGH && digitalRead(modeToggle) == LOW) 
        {
            if (menuMode) 
            {
                menuMode = false;
            } else 
            {
                menuMode = true;
            }
            
        }
        //setting previous for above loop to refference
        modePrevious = digitalRead(modeToggle);
        
        if (menuMode) 
        {
            //this is when blaster is in menu mode
            display.setCursor(0, 53);
            display.println("Menu Mode");
        } else 
        {
            // this is when blaster is in combat mode
            display.drawBitmap(118, 0, gun_icon, 10, 10, 1);
            display.setCursor(0, 53);
            display.println("Combat Mode");
            
        }
        display.display();
    }
    
}
